2018-03-23  Youenn Fablet  <youenn@apple.com>

        Update WPT tools to a1ec330
        https://bugs.webkit.org/show_bug.cgi?id=183934

        Reviewed by NOBODY (OOPS!).

        fix-183934

        * AUTHORS: Added.
        * CHANGELOG: Added.
        * LICENSE: Added.
        * MANIFEST.in: Added.
        * README.rst: Added.
        * appveyor.yml: Added.
        * bench/localpath.py: Added.
        (Listdir):
        (Listdir.setup):
        (Listdir.run):
        (Listdir_arg):
        (Listdir_arg.run):
        (Join_onearg):
        (Join_onearg.run):
        (Join_multi):
        (Join_multi.run):
        (Check):
        (Check.run):
        (CheckDir):
        (CheckDir.run):
        (CheckDir2):
        (CheckDir2.run):
        (CheckFile):
        (CheckFile.run):
        * bench/w3c-import.log: Copied from LayoutTests/imported/w3c/web-platform-tests/tools/w3c-import.log.
        * conftest.py: Added.
        (pytest_addoption):
        (sshhost):
        (getexecutable):
        (anypython):
        * doc/Makefile: Added.
        * doc/_templates/layout.html: Added.
        * doc/_templates/w3c-import.log: Copied from LayoutTests/imported/w3c/web-platform-tests/tools/w3c-import.log.
        * doc/announce/release-0.9.0.txt: Added.
        * doc/announce/release-0.9.2.txt: Added.
        * doc/announce/release-1.0.0.txt: Added.
        * doc/announce/release-1.0.1.txt: Added.
        * doc/announce/release-1.0.2.txt: Added.
        * doc/announce/release-1.1.0.txt: Added.
        * doc/announce/release-1.1.1.txt: Added.
        * doc/announce/release-1.2.0.txt: Added.
        * doc/announce/release-1.2.1.txt: Added.
        * doc/announce/release-1.3.0.txt: Added.
        * doc/announce/release-1.3.1.txt: Added.
        * doc/announce/release-1.3.2.txt: Added.
        * doc/announce/release-1.3.3.txt: Added.
        * doc/announce/release-1.3.4.txt: Added.
        * doc/announce/release-1.4.0.txt: Added.
        * doc/announce/release-1.4.1.txt: Added.
        * doc/announce/releases.txt: Added.
        * doc/announce/w3c-import.log: Added.
        * doc/changelog.txt: Added.
        * doc/code.txt: Added.
        * doc/conf.py: Added.
        * doc/download.html: Added.
        * doc/example/genhtml.py: Added.
        * doc/example/genhtmlcss.py: Added.
        (my):
        (my.body):
        (my.h2):
        (my.p):
        * doc/example/genxml.py: Added.
        (ns):
        * doc/example/w3c-import.log: Copied from LayoutTests/imported/w3c/web-platform-tests/tools/serve/w3c-import.log.
        * doc/faq.txt: Added.
        * doc/img/pylib.png: Added.
        * doc/img/w3c-import.log: Copied from LayoutTests/imported/w3c/web-platform-tests/tools/w3c-import.log.
        * doc/index.txt: Added.
        * doc/install.txt: Added.
        * doc/io.txt: Added.
        * doc/links.inc: Added.
        * doc/log.txt: Added.
        * doc/misc.txt: Added.
        * doc/path.txt: Added.
        * doc/style.css: Added.
        (body,body.editor,body.body):
        (a, a.reference):
        (a[href]:hover):
        (img):
        (p, div.text):
        (p a:active):
        (p img):
        (img.inlinephoto):
        (hr):
        (ul):
        (ol):
        (ul a, ol a):
        (dl):
        (dd):
        (blockquote):
        (code):
        (pre):
        (.netscape4):
        (span.menu_selected):
        (a.menu):
        (a.menu[href]:visited, a.menu[href]:link):
        (a.menu[href]:hover):
        (div#pagetitle):
        (a.wikicurrent):
        (table.body):
        (td.page-header-left):
        (td.page-header-top):
        (td.sidebar):
        (td.sidebar p.classblock):
        (td.sidebar p.userblock):
        (td.content):
        (p.ok-message):
        (p.error-message):
        (p:first-child):
        (table.form):
        (table.form th):
        (table.form th.header):
        (table.form th.required):
        (table.form td):
        (table.form td.optional):
        (table.form td.html):
        (table.list):
        (table.list th):
        (table.list th a[href]:hover):
        (table.list th a[href]:link):
        (table.list th a[href]):
        (table.list th.group):
        (table.list td):
        (table.list tr.normal td):
        (table.list tr.alt td):
        (table.list td:first-child):
        (table.list th:first-child):
        (table.list tr.navigation th):
        (table.list tr.navigation th:first-child):
        (table.messages):
        (table.messages th.header):
        (table.messages th):
        (table.messages td):
        (table.messages td:first-child):
        (table.files):
        (table.files th.header):
        (table.files th):
        (table.files td):
        (table.history):
        (table.history th.header):
        (table.history th):
        (table.history td):
        (table.classlist):
        (table.classlist th.header):
        (table.classlist th):
        (table.classhelp):
        (table.classhelp th):
        (table.classhelp td):
        (table.otherinfo):
        (table.otherinfo th.header):
        (table.otherinfo th):
        (input):
        (select):
        (a.nonexistent):
        (a.nonexistent:visited):
        (a.external):
        (div.diffold):
        (div.diffnew):
        (div.message):
        (strong.highlight):
        (table.navibar):
        (td.navibar):
        (a#versioninfo):
        (div#pagename):
        (a.wikiaction, input.wikiaction):
        (a.wikiaction[href]:hover):
        (div.legenditem):
        (span.wikitoken):
        (div#contentspace h1:first-child, div.heading:first-child):
        (div#contentspace h2:first-child):
        (div.heading, h1):
        (h2):
        (h1, h2, h3, h4, h5, h6):
        (h1):
        (h3):
        (h4):
        (h5):
        (h1 a):
        (div.exception):
        (pre.exception):
        (div.direntry):
        (div.fileentry):
        (a.fileentry):
        (span.left):
        (span.right):
        (div.navbar):
        (div.history a):
        (div.wikiactiontitle):
        (div.document):
        (h1.title):
        (td.toplist):
        (img#pyimg):
        (div#navspace):
        (div#errorline):
        (div#contentspace):
        (div#menubar):
        (div#title):
        (div#docnavlist):
        (div.listtitle):
        (div.actionbox h3):
        (div.actionbox a):
        (div.actionbox a.history):
        (div.actionbox):
        (ol.simple, ul.simple):
        (ol.arabic):
        (ol.loweralpha):
        (ol.upperalpha):
        (ol.lowerroman):
        (ol.upperroman):
        (div.section):
        * doc/w3c-import.log: Added.
        * doc/xml.txt: Added.
        * py/__init__.py: Added.
        * py/__metainfo.py: Added.
        * py/_builtin.py: Added.
        (reversed):
        (reversed_iterator):
        (reversed_iterator.__init__):
        (reversed_iterator.__iter__):
        (reversed_iterator.next):
        (reversed_iterator.__length_hint__):
        (any):
        (all):
        (sorted):
        (sorted.use_cmp):
        (GeneratorExit):
        (callable):
        (_totext):
        (_isbytes):
        (_istext):
        (_getimself):
        (_getfuncdict):
        (_getcode):
        (execfile):
        (print_):
        (exec_):
        (_reraise):
        (exec2):
        * py/_code/__init__.py: Added.
        * py/_code/_assertionnew.py: Added.
        (_is_ast_expr):
        (_is_ast_stmt):
        (Failure):
        (Failure.__init__):
        (interpret):
        (run):
        (getfailure):
        (DebugInterpreter):
        (DebugInterpreter.__init__):
        (DebugInterpreter.generic_visit):
        (DebugInterpreter._compile):
        (DebugInterpreter.visit_Expr):
        (DebugInterpreter.visit_Module):
        (DebugInterpreter.visit_Name):
        (DebugInterpreter.visit_Compare):
        (DebugInterpreter.visit_BoolOp):
        (DebugInterpreter.visit_UnaryOp):
        (DebugInterpreter.visit_BinOp):
        (DebugInterpreter.visit_Call):
        (DebugInterpreter._is_builtin_name):
        (DebugInterpreter.visit_Attribute):
        (DebugInterpreter.visit_Assert):
        (DebugInterpreter.visit_Assign):
        * py/_code/_assertionold.py: Added.
        (Failure):
        (Failure.__init__):
        (View):
        (View.__new__):
        (View.__getattr__):
        (View.__viewkey__):
        (View.__matchkey__):
        (View._selectsubclass):
        (View.__repr__):
        (enumsubclasses):
        (enumsubclasses.in):
        (Interpretable):
        (Interpretable.is_builtin):
        (Interpretable.eval):
        (Interpretable.run):
        (Interpretable.nice_explanation):
        (Name):
        (Name.is_local):
        (Name.is_global):
        (Name.is_builtin):
        (Name.eval):
        (Compare):
        (Compare.eval):
        (And):
        (And.eval):
        (Or):
        (Or.eval):
        (UnaryArith):
        (UnaryArith.eval):
        (BinaryArith):
        (BinaryArith.eval):
        (CallFunc):
        (CallFunc.is_bool):
        (CallFunc.eval):
        (Getattr):
        (Getattr.eval):
        (Assert):
        (Assert.run):
        (Assign):
        (Assign.run):
        (Discard):
        (Discard.run):
        (Stmt):
        (Stmt.run):
        (report_failure):
        (check):
        (interpret):
        (getmsg):
        (getfailure):
        (run):
        (f):
        (g):
        (h):
        * py/_code/_py2traceback.py: Added.
        (format_exception_only):
        (_format_final_exc_line):
        (_some_str):
        * py/_code/assertion.py: Added.
        (_format_explanation):
        (AssertionError):
        (AssertionError.__init__):
        * py/_code/code.py: Added.
        (Code):
        (Code.__init__):
        (Code.__eq__):
        (Code.__ne__):
        (Code.path):
        (Code.fullsource):
        (Code.source):
        (Code.getargs):
        (Frame):
        (Frame.__init__):
        (Frame.statement):
        (Frame.eval):
        (Frame.exec_):
        (Frame.repr):
        (Frame.is_true):
        (Frame.getargs):
        (TracebackEntry):
        (TracebackEntry.__init__):
        (TracebackEntry.set_repr_style):
        (TracebackEntry.frame):
        (TracebackEntry.relline):
        (TracebackEntry.__repr__):
        (TracebackEntry.statement):
        (TracebackEntry.path):
        (TracebackEntry.getlocals):
        (TracebackEntry.reinterpret):
        (TracebackEntry.getfirstlinesource):
        (TracebackEntry.getsource):
        (TracebackEntry.ishidden):
        (TracebackEntry.__str__):
        (TracebackEntry.name):
        (Traceback):
        (Traceback.__init__):
        (Traceback.__init__.f):
        (Traceback.cut):
        (Traceback.__getitem__):
        (Traceback.filter):
        (Traceback.getcrashentry):
        (Traceback.recursionindex):
        (ExceptionInfo):
        (ExceptionInfo.__init__):
        (ExceptionInfo.__repr__):
        (ExceptionInfo.exconly):
        (ExceptionInfo.errisinstance):
        (ExceptionInfo._getreprcrash):
        (ExceptionInfo.getrepr):
        (ExceptionInfo.__str__):
        (ExceptionInfo.__unicode__):
        (FormattedExcinfo):
        (FormattedExcinfo.__init__):
        (FormattedExcinfo._getindent):
        (FormattedExcinfo._getentrysource):
        (FormattedExcinfo._saferepr):
        (FormattedExcinfo.repr_args):
        (FormattedExcinfo.get_source):
        (FormattedExcinfo.get_exconly):
        (FormattedExcinfo.repr_locals):
        (FormattedExcinfo.repr_traceback_entry):
        (FormattedExcinfo._makepath):
        (FormattedExcinfo.repr_traceback):
        (FormattedExcinfo.repr_excinfo):
        (TerminalRepr):
        (TerminalRepr.__str__):
        (TerminalRepr.__unicode__):
        (TerminalRepr.__repr__):
        (ReprExceptionInfo):
        (ReprExceptionInfo.__init__):
        (ReprExceptionInfo.addsection):
        (ReprExceptionInfo.toterminal):
        (ReprTraceback):
        (ReprTraceback.__init__):
        (ReprTraceback.toterminal):
        (ReprTracebackNative):
        (ReprTracebackNative.__init__):
        (ReprEntryNative):
        (ReprEntryNative.__init__):
        (ReprEntryNative.toterminal):
        (ReprEntry):
        (ReprEntry.__init__):
        (ReprEntry.toterminal):
        (ReprEntry.__str__):
        (ReprFileLocation):
        (ReprFileLocation.__init__):
        (ReprFileLocation.toterminal):
        (ReprLocals):
        (ReprLocals.__init__):
        (ReprLocals.toterminal):
        (ReprFuncArgs):
        (ReprFuncArgs.__init__):
        (ReprFuncArgs.toterminal):
        (patch_builtins):
        (unpatch_builtins):
        (getrawcode):
        * py/_code/source.py: Added.
        (Source):
        (Source.__init__):
        (Source.__eq__):
        (Source.__getitem__):
        (Source.__len__):
        (Source.__getslice__):
        (Source.strip):
        (Source.putaround):
        (Source.indent):
        (Source.getstatement):
        (Source.getstatementrange):
        (Source.deindent):
        (Source.isparseable):
        (Source.__str__):
        (Source.compile):
        (compile_):
        (getfslineno):
        (findsource):
        (getsource):
        (deindent):
        (deindent.readline_generator):
        (get_statement_startend2):
        (getstatementrange_ast):
        (getstatementrange_old):
        (getstatementrange_old.xxx):
        * py/_code/w3c-import.log: Added.
        * py/_error.py: Added.
        (Error):
        (Error.__repr__):
        (Error.__str__):
        (ErrorMaker):
        (ErrorMaker.__getattr__):
        (ErrorMaker._geterrnoclass):
        (ErrorMaker.checked_call):
        * py/_io/__init__.py: Added.
        * py/_io/capture.py: Added.
        (TextIO):
        (TextIO.write):
        (BytesIO):
        (BytesIO.write):
        (FDCapture):
        (FDCapture.__init__):
        (FDCapture.start):
        (FDCapture.done):
        (FDCapture.writeorg):
        (dupfile):
        (EncodedFile):
        (EncodedFile.__init__):
        (EncodedFile.write):
        (EncodedFile.writelines):
        (EncodedFile.__getattr__):
        (Capture):
        (Capture.call):
        (Capture.reset):
        (Capture.suspend):
        (StdCaptureFD):
        (StdCaptureFD.__init__):
        (StdCaptureFD._save):
        (StdCaptureFD.startall):
        (StdCaptureFD.resume):
        (StdCaptureFD.done):
        (StdCaptureFD.readouterr):
        (StdCaptureFD._readsnapshot):
        (StdCapture):
        (StdCapture.__init__):
        (StdCapture.startall):
        (StdCapture.done):
        (StdCapture.resume):
        (StdCapture.readouterr):
        (DontReadFromInput):
        (DontReadFromInput.read):
        (DontReadFromInput.fileno):
        (DontReadFromInput.isatty):
        (DontReadFromInput.close):
        * py/_io/saferepr.py: Added.
        (SafeRepr):
        (SafeRepr.repr):
        (SafeRepr.repr_unicode):
        (SafeRepr.repr_unicode.repr):
        (SafeRepr.repr_instance):
        (SafeRepr._callhelper):
        (saferepr):
        * py/_io/terminalwriter.py: Added.
        (_getdimensions):
        (get_terminal_width):
        (ansi_print):
        (should_do_markup):
        (TerminalWriter):
        (TerminalWriter.__init__):
        (TerminalWriter.fullwidth):
        (TerminalWriter.chars_on_current_line):
        (TerminalWriter._escaped):
        (TerminalWriter.markup):
        (TerminalWriter.sep):
        (TerminalWriter.write):
        (TerminalWriter._update_chars_on_current_line):
        (TerminalWriter.line):
        (TerminalWriter.reline):
        (TerminalWriter._checkfill):
        (Win32ConsoleWriter):
        (Win32ConsoleWriter.write):
        (WriteFile):
        (WriteFile.__init__):
        (WriteFile.write):
        (WriteFile.flush):
        (COORD):
        (SMALL_RECT):
        (CONSOLE_SCREEN_BUFFER_INFO):
        (GetStdHandle):
        (GetConsoleInfo):
        (write_out):
        * py/_io/w3c-import.log: Copied from LayoutTests/imported/w3c/web-platform-tests/tools/w3c-import.log.
        * py/_log/__init__.py: Added.
        * py/_log/log.py: Added.
        (Message):
        (Message.__init__):
        (Message.content):
        (Message.prefix):
        (Message.__str__):
        (Producer):
        (Producer.__init__):
        (Producer.__repr__):
        (Producer.__getattr__):
        (Producer.__call__):
        (KeywordMapper):
        (KeywordMapper.__init__):
        (KeywordMapper.getstate):
        (KeywordMapper.setstate):
        (KeywordMapper.getconsumer):
        (KeywordMapper.setconsumer):
        (default_consumer):
        (setconsumer):
        (setstate):
        (getstate):
        (File):
        (File.__init__):
        (File.__call__):
        (Path):
        (Path.__init__):
        (Path._openfile):
        (Path.__call__):
        (STDOUT):
        (STDERR):
        (Syslog):
        (Syslog.__init__):
        (Syslog.__call__):
        * py/_log/w3c-import.log: Copied from LayoutTests/imported/w3c/web-platform-tests/tools/serve/w3c-import.log.
        * py/_log/warning.py: Added.
        (DeprecationWarning):
        (DeprecationWarning.__init__):
        (DeprecationWarning.__repr__):
        (DeprecationWarning.__str__):
        (_apiwarn):
        (warn):
        * py/_path/__init__.py: Added.
        * py/_path/cacheutil.py: Added.
        (BasicCache):
        (BasicCache.__init__):
        (BasicCache.clear):
        (BasicCache._getentry):
        (BasicCache._putentry):
        (BasicCache.delentry):
        (BasicCache.getorbuild):
        (BasicCache._prunelowestweight):
        (BuildcostAccessCache):
        (BuildcostAccessCache._build):
        (WeightedCountingEntry):
        (WeightedCountingEntry.__init__):
        (WeightedCountingEntry.value):
        (AgingCache):
        (AgingCache.__init__):
        (AgingCache._getentry):
        (AgingCache._build):
        (AgingEntry):
        (AgingEntry.__init__):
        (AgingEntry.isexpired):
        * py/_path/common.py: Added.
        (fspath):
        (Checkers):
        (Checkers.__init__):
        (Checkers.dir):
        (Checkers.file):
        (Checkers.dotfile):
        (Checkers.ext):
        (Checkers.exists):
        (Checkers.basename):
        (Checkers.basestarts):
        (Checkers.relto):
        (Checkers.fnmatch):
        (Checkers.endswith):
        (Checkers._evaluate):
        (NeverRaised):
        (PathBase):
        (PathBase.__div__):
        (PathBase.basename):
        (PathBase.dirname):
        (PathBase.purebasename):
        (PathBase.ext):
        (PathBase.dirpath):
        (PathBase.read_binary):
        (PathBase.read_text):
        (PathBase.read):
        (PathBase.readlines):
        (load):
        (move):
        (__repr__):
        (check):
        (fnmatch):
        (relto):
        (ensure_dir):
        (bestrelpath):
        (exists):
        (isdir):
        (isfile):
        (parts):
        (common):
        (__add__):
        (__cmp__):
        (__lt__):
        (visit):
        (_sortlist):
        (samefile):
        (__fspath__):
        (Visitor):
        (Visitor.__init__):
        (Visitor.gen):
        (FNMatcher):
        (FNMatcher.__init__):
        (FNMatcher.__call__):
        * py/_path/local.py: Added.
        (map_as_list):
        (Stat):
        (Stat.__getattr__):
        (Stat.__init__):
        (Stat.owner):
        (Stat.group):
        (Stat.isdir):
        (Stat.isfile):
        (Stat.islink):
        (PosixPath):
        (PosixPath.chown):
        (PosixPath.readlink):
        (PosixPath.mklinkto):
        (PosixPath.mksymlinkto):
        (getuserid):
        (getgroupid):
        (LocalPath):
        (LocalPath.ImportMismatchError):
        (LocalPath.Checkers):
        (LocalPath.Checkers._stat):
        (LocalPath.Checkers.dir):
        (LocalPath.Checkers.file):
        (LocalPath.Checkers.exists):
        (LocalPath.Checkers.link):
        (LocalPath.__init__):
        (LocalPath.__hash__):
        (LocalPath.__eq__):
        (LocalPath.__ne__):
        (LocalPath.__lt__):
        (LocalPath.__gt__):
        (LocalPath.samefile):
        (LocalPath.remove):
        (LocalPath.computehash):
        (LocalPath.new):
        (LocalPath._getbyspec):
        (LocalPath.dirpath):
        (LocalPath.join):
        (LocalPath.open):
        (LocalPath._fastjoin):
        (LocalPath.islink):
        (LocalPath.check):
        (LocalPath.listdir):
        (LocalPath.size):
        (LocalPath.mtime):
        (LocalPath.copy):
        (LocalPath.copy.rec):
        (LocalPath.rename):
        (LocalPath.dump):
        (LocalPath.mkdir):
        (LocalPath.write_binary):
        (LocalPath.write_text):
        (LocalPath.write):
        (LocalPath._ensuredirs):
        (LocalPath.ensure):
        (LocalPath.stat):
        (LocalPath.lstat):
        (LocalPath.setmtime):
        (LocalPath.chdir):
        (LocalPath.as_cwd):
        (LocalPath.realpath):
        (LocalPath.atime):
        (LocalPath.__repr__):
        (LocalPath.__str__):
        (LocalPath.chmod):
        (LocalPath.pypkgpath):
        (LocalPath._ensuresyspath):
        (LocalPath.pyimport):
        (LocalPath.sysexec):
        (LocalPath.sysfind):
        (LocalPath._gethomedir):
        (LocalPath.get_temproot):
        (LocalPath.mkdtemp):
        (LocalPath.make_numbered_dir):
        (LocalPath.make_numbered_dir.parse_num):
        (LocalPath.make_numbered_dir.create_lockfile):
        (LocalPath.make_numbered_dir.atexit_remove_lockfile):
        (LocalPath.make_numbered_dir.atexit_remove_lockfile.try_remove_lockfile):
        (LocalPath.make_numbered_dir.get_mtime):
        (LocalPath.make_numbered_dir.is_garbage):
        (copymode):
        (copystat):
        (copychunked):
        (isimportable):
        * py/_path/svnurl.py: Added.
        (SvnCommandPath):
        (SvnCommandPath.__new__):
        (SvnCommandPath.__repr__):
        (SvnCommandPath._svnwithrev):
        (SvnCommandPath._svnwrite):
        (SvnCommandPath._svncmdexecauth):
        (SvnCommandPath._cmdexec):
        (SvnCommandPath._svnpopenauth):
        (SvnCommandPath._popen):
        (SvnCommandPath._encodedurl):
        (SvnCommandPath._norev_delentry):
        (SvnCommandPath.open):
        (SvnCommandPath.dirpath):
        (SvnCommandPath.mkdir):
        (SvnCommandPath.copy):
        (SvnCommandPath.rename):
        (SvnCommandPath.remove):
        (export):
        (ensure):
        (_propget):
        (_proplist):
        (info):
        (_listdir_nameinfo):
        (_listdir_nameinfo.builder):
        (listdir):
        (log):
        (InfoSvnCommand):
        (InfoSvnCommand.__init__):
        (InfoSvnCommand.__eq__):
        (parse_time_with_missing_year):
        (PathEntry):
        (PathEntry.__init__):
        * py/_path/svnwc.py: Added.
        (cache):
        (RepoEntry):
        (RepoEntry.__init__):
        (RepoEntry.__str__):
        (RepoCache):
        (RepoCache.__init__):
        (RepoCache.clear):
        (RepoCache.put):
        (RepoCache.get):
        (_getsvnversion):
        (_escape_helper):
        (_check_for_bad_chars):
        (checkbadchars):
        (SvnPathBase):
        (SvnPathBase._geturl):
        (SvnPathBase.__str__):
        (SvnPathBase.__hash__):
        (SvnPathBase.new):
        (SvnPathBase._getbyspec):
        (SvnPathBase.__eq__):
        (SvnPathBase.__ne__):
        (SvnPathBase.join):
        (SvnPathBase.propget):
        (SvnPathBase.proplist):
        (SvnPathBase.size):
        (SvnPathBase.mtime):
        (SvnPathBase._escape):
        (SvnPathBase.Checkers):
        (SvnPathBase.Checkers.dir):
        (SvnPathBase.Checkers._listdirworks):
        (SvnPathBase.Checkers.file):
        (SvnPathBase.Checkers.exists):
        (parse_apr_time):
        (PropListDict):
        (PropListDict.__init__):
        (PropListDict.__getitem__):
        (fixlocale):
        (_check_path):
        (path_to_fspath):
        (url_from_path):
        (SvnAuth):
        (SvnAuth.__init__):
        (SvnAuth.makecmdoptions):
        (SvnAuth.__str__):
        (SvnWCCommandPath):
        (SvnWCCommandPath.__new__):
        (SvnWCCommandPath.__eq__):
        (SvnWCCommandPath._geturl):
        (SvnWCCommandPath._escape):
        (SvnWCCommandPath.dump):
        (SvnWCCommandPath.svnurl):
        (SvnWCCommandPath.__repr__):
        (SvnWCCommandPath.__str__):
        (SvnWCCommandPath._makeauthoptions):
        (SvnWCCommandPath._authsvn):
        (SvnWCCommandPath._svn):
        (SvnWCCommandPath.switch):
        (SvnWCCommandPath.checkout):
        (SvnWCCommandPath.update):
        (SvnWCCommandPath.write):
        (SvnWCCommandPath.dirpath):
        (SvnWCCommandPath._ensuredirs):
        (SvnWCCommandPath.ensure):
        (SvnWCCommandPath.mkdir):
        (SvnWCCommandPath.add):
        (SvnWCCommandPath.remove):
        (SvnWCCommandPath.copy):
        (SvnWCCommandPath.rename):
        (SvnWCCommandPath.lock):
        (SvnWCCommandPath.unlock):
        (SvnWCCommandPath.cleanup):
        (SvnWCCommandPath.status):
        (SvnWCCommandPath.diff):
        (SvnWCCommandPath.blame):
        (SvnWCCommandPath.commit):
        (SvnWCCommandPath.propset):
        (SvnWCCommandPath.propget):
        (SvnWCCommandPath.propdel):
        (SvnWCCommandPath.proplist):
        (revert):
        (new):
        (join):
        (info):
        (listdir):
        (listdir.notsvn):
        (open):
        (_getbyspec):
        (Checkers):
        (Checkers.__init__):
        (Checkers.versioned):
        (log):
        (size):
        (mtime):
        (__hash__):
        (WCStatus):
        (WCStatus.__init__):
        (WCStatus.allpath):
        (WCStatus.fromstring):
        (XMLWCStatus):
        (XMLWCStatus.fromstring):
        (InfoSvnWCCommand):
        (InfoSvnWCCommand.__init__):
        (InfoSvnWCCommand.__eq__):
        (parse_wcinfotime):
        (make_recursive_propdict):
        (importxml):
        (LogEntry):
        (LogEntry.__init__):
        (LogEntry.__repr__):
        * py/_path/w3c-import.log: Copied from LayoutTests/imported/w3c/web-platform-tests/tools/w3c-import.log.
        * py/_process/__init__.py: Added.
        * py/_process/cmdexec.py: Added.
        (cmdexec):
        (ExecutionFailed):
        (ExecutionFailed.__init__):
        (ExecutionFailed.__str__):
        * py/_process/forkedfunc.py: Added.
        (get_unbuffered_io):
        (get_unbuffered_io.AutoFlush):
        (get_unbuffered_io.AutoFlush.write):
        (get_unbuffered_io.AutoFlush.__getattr__):
        (ForkedFunc):
        (ForkedFunc.__init__):
        (ForkedFunc._child):
        (ForkedFunc.waitfinish):
        (ForkedFunc._removetemp):
        (ForkedFunc.__del__):
        (Result):
        (Result.__init__):
        * py/_process/killproc.py: Added.
        (dokill):
        (kill):
        * py/_process/w3c-import.log: Copied from LayoutTests/imported/w3c/web-platform-tests/tools/serve/w3c-import.log.
        * py/_std.py: Added.
        (PyStdIsDeprecatedWarning):
        (Std):
        (Std.__init__):
        (Std.__getattr__):
        * py/_vendored_packages/__init__.py: Added.
        * py/_vendored_packages/apipkg-1.4.dist-info/DESCRIPTION.rst: Added.
        * py/_vendored_packages/apipkg-1.4.dist-info/INSTALLER: Added.
        * py/_vendored_packages/apipkg-1.4.dist-info/METADATA: Added.
        * py/_vendored_packages/apipkg-1.4.dist-info/RECORD: Added.
        * py/_vendored_packages/apipkg-1.4.dist-info/WHEEL: Added.
        * py/_vendored_packages/apipkg-1.4.dist-info/metadata.json: Added.
        * py/_vendored_packages/apipkg-1.4.dist-info/top_level.txt: Added.
        * py/_vendored_packages/apipkg-1.4.dist-info/w3c-import.log: Added.
        * py/_vendored_packages/apipkg.py: Added.
        (_py_abspath):
        (distribution_version):
        (initpkg):
        (importobj):
        (ApiModule):
        (ApiModule.__docget):
        (ApiModule.__docset):
        (ApiModule.__init__):
        (ApiModule.__repr__):
        (ApiModule.__makeattr):
        (ApiModule.__dict__):
        (AliasModule):
        (AliasModule.getmod):
        (AliasModule.AliasModule):
        (AliasModule.AliasModule.__repr__):
        (AliasModule.AliasModule.__getattribute__):
        (AliasModule.AliasModule.__setattr__):
        (AliasModule.AliasModule.__delattr__):
        * py/_vendored_packages/iniconfig-1.0.0.dist-info/DESCRIPTION.rst: Added.
        * py/_vendored_packages/iniconfig-1.0.0.dist-info/INSTALLER: Added.
        * py/_vendored_packages/iniconfig-1.0.0.dist-info/METADATA: Added.
        * py/_vendored_packages/iniconfig-1.0.0.dist-info/RECORD: Added.
        * py/_vendored_packages/iniconfig-1.0.0.dist-info/WHEEL: Added.
        * py/_vendored_packages/iniconfig-1.0.0.dist-info/metadata.json: Added.
        * py/_vendored_packages/iniconfig-1.0.0.dist-info/top_level.txt: Added.
        * py/_vendored_packages/iniconfig-1.0.0.dist-info/w3c-import.log: Added.
        * py/_vendored_packages/iniconfig.py: Added.
        (ParseError):
        (ParseError.__init__):
        (ParseError.__str__):
        (SectionWrapper):
        (SectionWrapper.__init__):
        (SectionWrapper.lineof):
        (SectionWrapper.get):
        (SectionWrapper.__getitem__):
        (SectionWrapper.__iter__):
        (SectionWrapper.__iter__.lineof):
        (SectionWrapper.items):
        (IniConfig):
        (IniConfig.__init__):
        (IniConfig._raise):
        (IniConfig._parse):
        (IniConfig._parseline):
        (IniConfig.lineof):
        (IniConfig.get):
        (IniConfig.__getitem__):
        (IniConfig.__iter__):
        (IniConfig.__contains__):
        (iscommentline):
        * py/_vendored_packages/w3c-import.log: Copied from LayoutTests/imported/w3c/web-platform-tests/tools/serve/w3c-import.log.
        * py/_xmlgen.py: Added.
        (u):
        (unicode):
        (NamespaceMetaclass):
        (NamespaceMetaclass.__getattr__):
        (NamespaceMetaclass.__getattr__.is):
        (Tag):
        (Tag.Attr):
        (Tag.Attr.__init__):
        (Tag.__init__):
        (Tag.__unicode__):
        (Tag.unicode):
        (Tag.__repr__):
        (HtmlTag):
        (HtmlTag.unicode):
        (html):
        (html.Style):
        (html.Style.__init__):
        (raw):
        (raw.__init__):
        (SimpleUnicodeVisitor):
        (SimpleUnicodeVisitor.__init__):
        (SimpleUnicodeVisitor.visit):
        (SimpleUnicodeVisitor.visit.in):
        (SimpleUnicodeVisitor.__object):
        (SimpleUnicodeVisitor.raw):
        (SimpleUnicodeVisitor.list):
        (SimpleUnicodeVisitor.Tag):
        (SimpleUnicodeVisitor.attributes):
        (SimpleUnicodeVisitor.repr_attribute):
        (SimpleUnicodeVisitor.getstyle):
        (SimpleUnicodeVisitor._issingleton):
        (SimpleUnicodeVisitor._isinline):
        (HtmlVisitor):
        (HtmlVisitor.repr_attribute):
        (HtmlVisitor._issingleton):
        (HtmlVisitor._isinline):
        (_escape):
        (_escape.__init__):
        (_escape._replacer):
        (_escape.__call__):
        * py/test.py: Added.
        * py/w3c-import.log: Copied from LayoutTests/imported/w3c/web-platform-tests/tools/serve/w3c-import.log.
        * setup.cfg: Added.
        * setup.py: Added.
        (get_version):
        (main):
        * tasks/__init__.py: Added.
        * tasks/vendoring.py: Added.
        (remove_libs):
        (update_libs):
        * tasks/w3c-import.log: Copied from LayoutTests/imported/w3c/web-platform-tests/tools/w3c-import.log.
        * testing/code/test_assertion.py: Added.
        (exvalue):
        (f):
        (test_assert):
        (test_assert_within_finally):
        (test_hello):
        * testing/code/test_code.py: Added.
        (test_ne):
        (test_code_gives_back_name_for_not_existing_file):
        (test_code_with_class):
        (test_code_with_class.A):
        (x):
        (test_code_fullsource):
        (test_code_source):
        (test_code_source.x):
        (test_frame_getsourcelineno_myself):
        (test_frame_getsourcelineno_myself.func):
        (test_getstatement_empty_fullsource):
        (test_getstatement_empty_fullsource.func):
        (test_code_from_func):
        (test_builtin_patch_unpatch):
        (test_builtin_patch_unpatch.mycompile):
        (test_builtin_patch_unpatch.Sub):
        (test_unicode_handling):
        (test_unicode_handling.f):
        (test_code_getargs):
        (test_code_getargs.f1):
        (test_code_getargs.f2):
        (test_code_getargs.f3):
        (test_code_getargs.f4):
        (test_frame_getargs):
        (test_frame_getargs.f1):
        (test_frame_getargs.f2):
        (test_frame_getargs.f3):
        (test_frame_getargs.f4):
        (TestExceptionInfo):
        (TestExceptionInfo.test_bad_getsource):
        (TestTracebackEntry):
        (TestTracebackEntry.test_getsource):
        * testing/code/test_excinfo.py: Added.
        (TWMock):
        (TWMock.__init__):
        (TWMock.sep):
        (TWMock.line):
        (TWMock.markup):
        (test_excinfo_simple):
        (test_excinfo_getstatement):
        (test_excinfo_getstatement.g):
        (test_excinfo_getstatement.f):
        (f):
        (g):
        (h):
        (TestTraceback_f_g_h):
        (TestTraceback_f_g_h.setup_method):
        (TestTraceback_f_g_h.test_traceback_entries):
        (TestTraceback_f_g_h.test_traceback_entry_getsource):
        (TestTraceback_f_g_h.test_traceback_entry_getsource.f):
        (TestTraceback_f_g_h.test_traceback_entry_getsource_in_construct):
        (TestTraceback_f_g_h.test_traceback_entry_getsource_in_construct.xyz):
        (func1):
        (entry):
        (rec2):
        (rec1):
        (somefunc):
        (i):
        * testing/code/test_source.py: Added.
        (test_source_str_function):
        (test_source_putaround):
        (f):
        (g):
        (test_deindent):
        (test_deindent.f):
        (f.g):
        (A):
        (A.method):
        (test_idem_compile_and_getsource):
        (test_idem_compile_and_getsource.x):
        (test_findsource_fallback):
        (test_findsource_fallback.x):
        (test_findsource):
        (test_findsource.x):
        (test_comment_in_statement):
        (test_body):
        (test_except_line):
        (test_except_body):
        (test_else):
        (TestTryFinally):
        (test_elif_clause):
        (test_elif):
        (test_semicolon):
        (func):
        (XXX_test_expression_multiline):
        * testing/code/w3c-import.log: Copied from LayoutTests/imported/w3c/web-platform-tests/tools/w3c-import.log.
        * testing/conftest.py: Added.
        * testing/io_/__init__.py: Added.
        * testing/io_/test_capture.py: Added.
        (tobytes):
        (totext):
        (oswritebytes):
        (TestTextIO):
        (TestTextIO.test_text):
        (TestTextIO.test_unicode_and_str_mixture):
        (test_bytes_io):
        (test_dontreadfrominput):
        (pytest_funcarg__tmpfile):
        (test_dupfile):
        (test_dupfile_no_mode):
        (test_dupfile_no_mode.SomeFileWrapper):
        (test_dupfile_no_mode.SomeFileWrapper.fileno):
        (lsof_check):
        (TestFDCapture):
        (TestFDCapture.test_not_now):
        (TestFDCapture.test_simple):
        (TestFDCapture.test_simple_many):
        (TestFDCapture.test_simple_many_check_open_files):
        (TestFDCapture.test_simple_fail_second_start):
        (TestFDCapture.test_stderr):
        (TestFDCapture.test_stdin):
        (TestFDCapture.test_writeorg):
        (TestStdCapture):
        (TestStdCapture.getcapture):
        (TestStdCapture.test_capturing_done_simple):
        (TestStdCapture.test_capturing_reset_simple):
        (TestStdCapture.test_capturing_readouterr):
        (TestStdCapture.test_capturing_readouterr_unicode):
        (TestStdCapture.test_capturing_readouterr_decode_error_handling):
        (TestStdCapture.test_capturing_mixed):
        (TestStdCapture.test_reset_twice_error):
        (TestStdCapture.test_capturing_modify_sysouterr_in_between):
        (TestStdCapture.test_capturing_error_recursive):
        (TestStdCapture.test_just_out_capture):
        (TestStdCapture.test_just_err_capture):
        (TestStdCapture.test_stdin_restored):
        (TestStdCapture.test_stdin_nulled_by_default):
        (TestStdCapture.test_suspend_resume):
        (TestStdCaptureNotNow):
        (TestStdCaptureNotNow.getcapture):
        (TestStdCaptureFD):
        (TestStdCaptureFD.getcapture):
        (TestStdCaptureFD.test_intermingling):
        (TestStdCaptureFD.test_callcapture):
        (TestStdCaptureFD.test_callcapture.func):
        (TestStdCaptureFD.test_many):
        (TestStdCaptureFD.test_many.f):
        (TestStdCaptureFDNotNow):
        (TestStdCaptureFDNotNow.getcapture):
        (test_stdcapture_fd_tmpfile):
        (TestStdCaptureFDinvalidFD):
        (TestStdCaptureFDinvalidFD.test_stdcapture_fd_invalid_fd):
        (TestStdCaptureFDinvalidFD.test_stdcapture_fd_invalid_fd.test_stdout):
        (TestStdCaptureFDinvalidFD.test_stdcapture_fd_invalid_fd.test_stderr):
        (TestStdCaptureFDinvalidFD.test_stdcapture_fd_invalid_fd.test_stdin):
        * testing/io_/test_saferepr.py: Added.
        (TestSafeRepr):
        (TestSafeRepr.test_simple_repr):
        (TestSafeRepr.test_maxsize):
        (TestSafeRepr.test_maxsize_error_on_instance):
        (TestSafeRepr.test_maxsize_error_on_instance.A):
        (TestSafeRepr.test_maxsize_error_on_instance.A.__repr__):
        (TestSafeRepr.test_exceptions):
        (TestSafeRepr.test_exceptions.BrokenRepr):
        (TestSafeRepr.test_exceptions.BrokenRepr.__init__):
        (TestSafeRepr.test_exceptions.BrokenRepr.__repr__):
        (TestSafeRepr.test_exceptions.BrokenReprException):
        (TestSafeRepr.test_big_repr):
        (TestSafeRepr.test_repr_on_newstyle):
        (TestSafeRepr.test_repr_on_newstyle.Function):
        (TestSafeRepr.test_repr_on_newstyle.Function.__repr__):
        (TestSafeRepr.test_unicode):
        (test_unicode_handling):
        (test_unicode_handling.f):
        * testing/io_/test_terminalwriter.py: Added.
        (test_get_terminal_width):
        (test_getdimensions):
        (test_terminal_width_COLUMNS):
        (test_terminalwriter_defaultwidth_80):
        (test_terminalwriter_getdimensions_bogus):
        (test_terminalwriter_getdimensions_emacs):
        (test_terminalwriter_computes_width):
        (test_terminalwriter_default_instantiation):
        (test_terminalwriter_dumb_term_no_markup):
        (test_terminalwriter_dumb_term_no_markup.MyFile):
        (test_terminalwriter_dumb_term_no_markup.MyFile.isatty):
        (test_terminalwriter_file_unicode):
        (test_unicode_encoding):
        (test_unicode_on_file_with_ascii_encoding):
        (TestTerminalWriter):
        (TestTerminalWriter.pytest_generate_tests):
        (TestTerminalWriter.pytest_funcarg__tw):
        (TestTerminalWriter.pytest_funcarg__tw.getlines):
        (TestTerminalWriter.test_line):
        (TestTerminalWriter.test_line_unicode):
        (TestTerminalWriter.test_sep_no_title):
        (TestTerminalWriter.test_sep_with_title):
        (TestTerminalWriter.test__escaped):
        (TestTerminalWriter.test_markup):
        (TestTerminalWriter.test_line_write_markup):
        (TestTerminalWriter.test_attr_fullwidth):
        (TestTerminalWriter.test_reline):
        (test_terminal_with_callable_write_and_flush):
        (test_terminal_with_callable_write_and_flush.fil):
        (test_chars_on_current_line):
        (test_chars_on_current_line.write_and_check):
        (test_attr_hasmarkup):
        (test_ansi_print):
        (test_should_do_markup_PY_COLORS_eq_1):
        (test_should_do_markup_PY_COLORS_eq_0):
        * testing/io_/w3c-import.log: Copied from LayoutTests/imported/w3c/web-platform-tests/tools/serve/w3c-import.log.
        * testing/log/__init__.py: Added.
        * testing/log/test_log.py: Added.
        (setup_module):
        (teardown_module):
        (TestLogProducer):
        (TestLogProducer.setup_method):
        (TestLogProducer.test_getstate_setstate):
        (TestLogProducer.test_producer_repr):
        (TestLogProducer.test_produce_one_keyword):
        (TestLogProducer.test_producer_class):
        (TestLogProducer.test_producer_caching):
        (TestLogConsumer):
        (TestLogConsumer.setup_method):
        (TestLogConsumer.test_log_none):
        (TestLogConsumer.test_log_default_stderr):
        (TestLogConsumer.test_simple_consumer_match):
        (TestLogConsumer.test_simple_consumer_match_2):
        (TestLogConsumer.test_no_auto_producer):
        (TestLogConsumer.test_setconsumer_with_producer):
        (TestLogConsumer.test_multi_consumer):
        (TestLogConsumer.test_log_stderr):
        (TestLogConsumer.test_log_file):
        (TestLogConsumer.test_log_file_append_mode):
        (TestLogConsumer.test_log_file_delayed_create):
        (TestLogConsumer.test_keyword_based_log_files):
        (TestLogConsumer.no_test_log_syslog):
        (TestLogConsumer.no_test_log_winevent):
        (TestLogConsumer.no_test_log_email):
        * testing/log/test_warning.py: Added.
        (test_forwarding_to_warnings_module):
        (test_apiwarn_functional):
        (test_stacklevel):
        (test_stacklevel.f):
        (test_stacklevel_initpkg_with_resolve):
        (test_stacklevel_initpkg_with_resolve.f):
        (test_stacklevel_initpkg_with_resolve.__getattr__):
        * testing/log/w3c-import.log: Copied from LayoutTests/imported/w3c/web-platform-tests/tools/serve/w3c-import.log.
        * testing/path/common.py: Added.
        (CommonFSTests):
        (CommonFSTests.test_constructor_equality):
        (CommonFSTests.test_eq_nonstring):
        (CommonFSTests.test_new_identical):
        (CommonFSTests.test_join):
        (CommonFSTests.test_join_normalized):
        (CommonFSTests.test_join_noargs):
        (CommonFSTests.test_add_something):
        (CommonFSTests.test_parts):
        (CommonFSTests.test_common):
        (CommonFSTests.test_basename_checks):
        (CommonFSTests.test_basename):
        (CommonFSTests.test_dirname):
        (CommonFSTests.test_dirpath):
        (CommonFSTests.test_dirpath_with_args):
        (CommonFSTests.test_newbasename):
        (CommonFSTests.test_not_exists):
        (CommonFSTests.test_exists):
        (CommonFSTests.test_dir):
        (CommonFSTests.test_fnmatch_file):
        (CommonFSTests.test_relto):
        (CommonFSTests.test_bestrelpath):
        (CommonFSTests.test_relto_not_relative):
        (CommonFSTests.test_listdir):
        (CommonFSTests.test_listdir_fnmatchstring):
        (CommonFSTests.test_listdir_filter):
        (CommonFSTests.test_listdir_sorted):
        (CommonFSTests.test_visit_nofilter):
        (CommonFSTests.test_visit_norecurse):
        (CommonFSTests.test_visit_filterfunc_is_string):
        (CommonFSTests.test_visit_ignore):
        (CommonFSTests.test_visit_endswith):
        (CommonFSTests.test_endswith):
        (CommonFSTests.test_cmp):
        (CommonFSTests.test_simple_read):
        (CommonFSTests.test_join_div_operator):
        (CommonFSTests.test_ext):
        (CommonFSTests.test_purebasename):
        (CommonFSTests.test_multiple_parts):
        (CommonFSTests.test_dotted_name_ext):
        (CommonFSTests.test_newext):
        (CommonFSTests.test_readlines):
        (CommonFSTests.test_readlines_nocr):
        (CommonFSTests.test_file):
        (CommonFSTests.test_not_file):
        (CommonFSTests.test_non_existent):
        (CommonFSTests.test_size):
        (CommonFSTests.test_mtime):
        (CommonFSTests.test_relto_wrong_type):
        (CommonFSTests.test_load):
        (CommonFSTests.test_visit_filesonly):
        (CommonFSTests.test_visit_nodotfiles):
        (CommonFSTests.test_visit_breadthfirst):
        (CommonFSTests.test_visit_sort):
        (CommonFSTests.test_endswith.chk):
        (CommonFSTests.test_copy_file):
        (CommonFSTests.test_copy_dir):
        (CommonFSTests.test_remove_file):
        (CommonFSTests.test_remove_dir_recursive_by_default):
        (CommonFSTests.test_ensure_dir):
        (CommonFSTests.test_mkdir_and_remove):
        (CommonFSTests.test_move_file):
        (CommonFSTests.test_move_dir):
        (CommonFSTests.test_fspath_protocol_match_strpath):
        (CommonFSTests.test_fspath_func_match_strpath):
        (CommonFSTests.test_fspath_open):
        (CommonFSTests.test_fspath_fsencode):
        (setuptestfs):
        * testing/path/conftest.py: Added.
        (pytest_funcarg__repowc1):
        (pytest_funcarg__repowc2):
        (getsvnbin):
        (getrepowc):
        (save_repowc):
        (restore_repowc):
        * testing/path/repotest.dump: Added.
        * testing/path/svntestbase.py: Added.
        (CommonSvnTests):
        (CommonSvnTests.test_propget):
        (CommonSvnTests.test_proplist):
        (CommonSvnTests.test_info):
        (CommonSvnTests.test_log_simple):
        * testing/path/test_cacheutil.py: Added.
        (BasicCacheAPITest):
        (BasicCacheAPITest.test_getorbuild):
        (BasicCacheAPITest.test_cache_get_key_error):
        (BasicCacheAPITest.test_delentry_non_raising):
        (BasicCacheAPITest.test_delentry_raising):
        (BasicCacheAPITest.test_clear):
        (TestBuildcostAccess):
        (TestBuildcostAccess.test_cache_works_somewhat_simple):
        (TestBuildcostAccess.test_cache_works_somewhat_simple.counter):
        (TestAging):
        (TestAging.test_cache_eviction):
        (test_prune_lowestweight):
        * testing/path/test_local.py: Added.
        (path1):
        (fake_fspath_obj):
        (fake_fspath_obj.FakeFSPathClass):
        (fake_fspath_obj.FakeFSPathClass.__init__):
        (fake_fspath_obj.FakeFSPathClass.__fspath__):
        (batch_make_numbered_dirs):
        (TestLocalPath):
        (TestLocalPath.test_join_normpath):
        (TestLocalPath.test_dirpath_abs_no_abs):
        (TestLocalPath.test_gethash):
        (TestLocalPath.test_remove_removes_readonly_file):
        (TestLocalPath.test_remove_removes_readonly_dir):
        (TestLocalPath.test_remove_removes_dir_and_readonly_file):
        (TestLocalPath.test_remove_routes_ignore_errors):
        (TestLocalPath.test_initialize_curdir):
        (TestLocalPath.test_chdir_gone):
        (TestLocalPath.test_as_cwd):
        (TestLocalPath.test_as_cwd_exception):
        (TestLocalPath.test_initialize_reldir):
        (TestLocalPath.test_tilde_expansion):
        (TestLocalPath.test_eq_with_strings):
        (TestLocalPath.test_eq_with_none):
        (TestLocalPath.test_eq_non_ascii_unicode):
        (TestLocalPath.test_gt_with_strings):
        (TestLocalPath.test_open_and_ensure):
        (TestLocalPath.test_write_and_ensure):
        (TestLocalPath.test_dump):
        (TestLocalPath.test_setmtime):
        (TestLocalPath.test_normpath):
        (TestLocalPath.test_mkdtemp_creation):
        (TestLocalPath.test_tmproot):
        (TestLocalPath.test_chdir):
        (TestLocalPath.test_ensure_filepath_withdir):
        (TestLocalPath.test_ensure_filepath_withoutdir):
        (TestLocalPath.test_ensure_dirpath):
        (TestLocalPath.test_ensure_non_ascii_unicode):
        (TestLocalPath.test_init_from_path):
        (TestLocalPath.test_long_filenames):
        (TestLocalPath.test_visit_depth_first):
        (TestLocalPath.test_visit_rec_fnmatch):
        (TestLocalPath.test_fnmatch_file_abspath):
        (TestLocalPath.test_sysfind):
        (TestLocalPath.test_fspath_protocol_other_class):
        (TestLocalPath.test_make_numbered_dir_multiprocess_safe):
        (TestExecutionOnWindows):
        (TestExecutionOnWindows.test_sysfind_bat_exe_before):
        (TestExecution):
        (TestExecution.test_sysfind_no_permisson_ignored):
        (TestExecution.test_sysfind_absolute):
        (TestExecution.test_sysfind_multiple):
        (TestExecution.test_sysexec):
        (TestExecution.test_sysexec_failing):
        (TestExecution.test_make_numbered_dir):
        (TestExecution.test_make_numbered_dir_case_insensitive):
        (TestExecution.test_make_numbered_dir_case_sensitive):
        (TestExecution.test_make_numbered_dir_NotImplemented_Error):
        (TestExecution.test_make_numbered_dir_NotImplemented_Error.notimpl):
        (TestExecution.test_locked_make_numbered_dir):
        (TestExecution.test_error_preservation):
        (TestImport):
        (TestImport.test_pyimport):
        (TestImport.test_pyimport_renamed_dir_creates_mismatch):
        (TestImport.test_pyimport_messy_name):
        (TestImport.test_pyimport_dir):
        (TestImport.test_pyimport_execfile_different_name):
        (TestImport.test_pyimport_a):
        (TestImport.test_pyimport_b):
        (TestImport.test_pyimport_c):
        (TestImport.test_pyimport_d):
        (TestImport.test_pyimport_and_import):
        (TestImport.test_pyimport_check_filepath_consistency):
        (TestImport.test_issue131_pyimport_on__init__):
        (TestImport.test_ensuresyspath_append):
        (test_pypkgdir):
        (test_pypkgdir_unimportable):
        (test_isimportable):
        (test_homedir_from_HOME):
        (test_homedir_not_exists):
        (test_samefile):
        (test_listdir_single_arg):
        (test_mkdtemp_rootdir):
        (TestWINLocalPath):
        (TestWINLocalPath.test_owner_group_not_implemented):
        (TestWINLocalPath.test_chmod_simple_int):
        (TestWINLocalPath.test_path_comparison_lowercase_mixed):
        (TestWINLocalPath.test_relto_with_mixed_case):
        (TestWINLocalPath.test_allow_unix_style_paths):
        (TestWINLocalPath.test_sysfind_in_currentdir):
        (TestWINLocalPath.test_fnmatch_file_abspath_posix_pattern_on_win32):
        (TestPOSIXLocalPath):
        (TestPOSIXLocalPath.test_hardlink):
        (TestPOSIXLocalPath.test_symlink_are_identical):
        (TestPOSIXLocalPath.test_symlink_isfile):
        (TestPOSIXLocalPath.test_symlink_relative):
        (TestPOSIXLocalPath.test_symlink_not_existing):
        (TestPOSIXLocalPath.test_relto_with_root):
        (TestPOSIXLocalPath.test_visit_recursive_symlink):
        (TestPOSIXLocalPath.test_symlink_isdir):
        (TestPOSIXLocalPath.test_symlink_remove):
        (TestPOSIXLocalPath.test_realpath_file):
        (TestPOSIXLocalPath.test_owner):
        (TestPOSIXLocalPath.test_stat_helpers):
        (TestPOSIXLocalPath.test_stat_non_raising):
        (TestPOSIXLocalPath.test_atime):
        (TestPOSIXLocalPath.test_commondir):
        (TestPOSIXLocalPath.test_commondir_nocommon):
        (TestPOSIXLocalPath.test_join_to_root):
        (TestPOSIXLocalPath.test_join_root_to_root_with_no_abs):
        (TestPOSIXLocalPath.test_chmod_simple_int):
        (TestPOSIXLocalPath.test_chmod_rec_int):
        (TestPOSIXLocalPath.test_chmod_rec_int.recfilter):
        (TestPOSIXLocalPath.test_copy_archiving):
        (TestPOSIXLocalPath.test_copy_stat_file):
        (TestPOSIXLocalPath.test_copy_stat_dir):
        (TestPOSIXLocalPath.test_chown_identity):
        (TestPOSIXLocalPath.test_chown_dangling_link):
        (TestPOSIXLocalPath.test_chown_identity_rec_mayfail):
        (TestUnicodePy2Py3):
        (TestUnicodePy2Py3.test_join_ensure):
        (TestUnicodePy2Py3.test_listdir):
        (TestUnicodePy2Py3.test_read_write):
        (TestBinaryAndTextMethods):
        (TestBinaryAndTextMethods.test_read_binwrite):
        (TestBinaryAndTextMethods.test_read_textwrite):
        (TestBinaryAndTextMethods.test_default_encoding):
        * testing/path/test_svnauth.py: Added.
        (make_repo_auth):
        (test_info):
        (test_info.dirpath):
        * testing/path/test_svnurl.py: Added.
        (pytest_funcarg__path1):
        (TestSvnURLCommandPath):
        (TestSvnURLCommandPath.test_load):
        (TestSvnURLCommandPath.test_listdir):
        (TestSvnURLCommandPath.test_visit_ignore):
        (TestSvnURLCommandPath.test_svnurl_needs_arg):
        (TestSvnURLCommandPath.test_svnurl_does_not_accept_None_either):
        (TestSvnURLCommandPath.test_svnurl_characters_simple):
        (TestSvnURLCommandPath.test_svnurl_characters_at_user):
        (TestSvnURLCommandPath.test_svnurl_characters_at_path):
        (TestSvnURLCommandPath.test_svnurl_characters_colon_port):
        (TestSvnURLCommandPath.test_svnurl_characters_tilde_end):
        (TestSvnURLCommandPath.test_svnurl_characters_colon_path):
        (TestSvnURLCommandPath.test_export):
        (TestSvnInfoCommand):
        (TestSvnInfoCommand.test_svn_1_2):
        (TestSvnInfoCommand.test_svn_1_3):
        (TestSvnInfoCommand.test_svn_1_3_b):
        (test_badchars):
        * testing/path/test_svnwc.py: Added.
        (test_make_repo):
        (pytest_funcarg__path1):
        (TestWCSvnCommandPath):
        (TestWCSvnCommandPath.test_status_attributes_simple):
        (TestWCSvnCommandPath.test_status_attributes_simple.assert_nochange):
        (TestWCSvnCommandPath.test_status_added):
        (TestWCSvnCommandPath.test_status_change):
        (TestWCSvnCommandPath.test_status_added_ondirectory):
        (TestWCSvnCommandPath.test_status_unknown):
        (TestWCSvnCommandPath.test_status_unchanged):
        (TestWCSvnCommandPath.test_status_update):
        (TestWCSvnCommandPath.test_status_replaced):
        (TestWCSvnCommandPath.test_status_ignored):
        (TestWCSvnCommandPath.test_status_conflict):
        (TestWCSvnCommandPath.test_status_external):
        (TestWCSvnCommandPath.test_status_deleted):
        (TestWCSvnCommandPath.test_status_noauthor):
        * testing/path/w3c-import.log: Added.
        * testing/process/__init__.py: Added.
        * testing/process/test_cmdexec.py: Added.
        (exvalue):
        (Test_exec_cmd):
        (Test_exec_cmd.test_simple):
        (Test_exec_cmd.test_simple_newline):
        (Test_exec_cmd.test_simple_error):
        (Test_exec_cmd.test_simple_error_exact_status):
        (Test_exec_cmd.test_err):
        * testing/process/test_forkedfunc.py: Added.
        (test_waitfinish_removes_tempdir):
        (test_tempdir_gets_gc_collected):
        (test_basic_forkedfunc):
        (test_exitstatus):
        (test_exitstatus.func):
        (test_execption_in_func):
        (test_execption_in_func.fun):
        (test_forkedfunc_on_fds):
        (test_forkedfunc_on_fds_output):
        (test_forkedfunc_on_stdout):
        (test_forkedfunc_on_stdout.boxf3):
        (test_forkedfunc_signal):
        (test_forkedfunc_huge_data):
        (test_box_seq):
        (test_box_in_a_box):
        (test_box_in_a_box.boxfun):
        (test_kill_func_forked):
        (test_kill_func_forked.A):
        (test_kill_func_forked.box_fun):
        (test_hooks):
        (test_hooks._boxed):
        (test_hooks._on_start):
        (test_hooks._on_exit):
        (boxf1):
        (boxf2):
        (boxf3):
        (boxseg):
        (boxhuge):
        * testing/process/test_killproc.py: Added.
        (test_kill):
        * testing/process/w3c-import.log: Copied from LayoutTests/imported/w3c/web-platform-tests/tools/w3c-import.log.
        * testing/root/__init__.py: Added.
        * testing/root/test_builtin.py: Added.
        (test_enumerate):
        (test_any):
        (test_all):
        (test_BaseException):
        (test_BaseException.MyRandomClass):
        (test_GeneratorExit):
        (test_reversed):
        (test_simple):
        (test_frozenset):
        (test_sorted):
        (test_sorted.test):
        (test_sorted.test.compare):
        (test_print_simple):
        (test_print_simple.X):
        (test_print_simple.X.__repr__):
        (test_execfile):
        (test_execfile.f):
        (test_execfile.A):
        (test_getfuncdict):
        (test_getfuncdict.f):
        (test_callable):
        (test_callable.A):
        (test_totext):
        (test_bytes_text):
        (test_totext_badutf8):
        (test_reraise):
        (test_exec):
        (test_tryimport):
        (test_getcode):
        * testing/root/test_error.py: Added.
        (test_error_classes):
        (test_has_name):
        (test_picklability_issue1):
        (test_unknown_error):
        (test_error_conversion_ENOTDIR):
        (test_checked_call_supports_kwargs):
        (Case):
        (Case.test_assertWarns):
        * testing/root/test_py_imports.py: Added.
        (test_dir):
        (test_virtual_module_identity):
        (test_importall):
        (test_importall.recurse):
        (check_import):
        (test_star_import):
        (test_all_resolves):
        * testing/root/test_std.py: Added.
        (test_os):
        (test_import_error_converts_to_attributeerror):
        (test_std_gets_it):
        * testing/root/test_xmlgen.py: Added.
        (ns):
        (test_escape):
        (test_escape.A):
        (test_escape.A.__unicode__):
        (test_escape.A.__str__):
        (test_tag_with_text):
        (test_class_identity):
        (test_tag_with_text_and_attributes):
        (test_tag_with_subclassed_attr_simple):
        (test_tag_with_subclassed_attr_simple.my):
        (test_tag_with_subclassed_attr_simple.my.Attr):
        (test_tag_with_raw_attr):
        (test_tag_nested):
        (test_list_nested):
        (test_tag_xmlname):
        (test_tag_xmlname.my):
        (test_tag_with_text_entity):
        (test_tag_with_text_and_attributes_entity):
        (test_raw):
        (test_html_name_stickyness):
        (test_html_name_stickyness.my):
        (test_stylenames):
        (test_stylenames.my):
        (test_stylenames.my.body):
        (test_class_None):
        (test_alternating_style):
        (test_alternating_style.my):
        (test_alternating_style.my.li):
        (test_alternating_style.my.li.style):
        (test_singleton):
        (test_inline):
        (test_object_tags):
        * testing/root/w3c-import.log: Copied from LayoutTests/imported/w3c/web-platform-tests/tools/serve/w3c-import.log.
        * testing/w3c-import.log: Copied from LayoutTests/imported/w3c/web-platform-tests/tools/w3c-import.log.
        * tox.ini: Added.
        * w3c-import.log: Added.

1.5.2
=====

- fix #169, #170: error importing py.log on Windows: no module named ``syslog``.

1.5.1
=====

- fix #167 - prevent pip from installing py in unsupported Python versions.

1.5.0
=====

NOTE: **this release has been removed from PyPI** due to missing package
metadata which caused a number of problems to py26 and py33 users.
This issue was fixed in the 1.5.1 release.

- python 2.6 and 3.3 are no longer supported
- deprecate py.std and remove all internal uses
- fix #73 turn py.error into an actual module
- path join to / no longer produces leading double slashes
- fix #82 - remove unsupportable aliases
- fix python37 compatibility of path.sysfind on windows by correctly replacing vars
- turn iniconfig and apipkg into vendored packages and ease de-vendoring for distributions
- fix #68 remove invalid py.test.ensuretemp references
- fix #25 - deprecate path.listdir(sort=callable)
- add ``TerminalWriter.chars_on_current_line`` read-only property that tracks how many characters
  have been written to the current line.

1.4.34
====================================================================

- fix issue119 / pytest issue708 where tmpdir may fail to make numbered directories
  when the filesystem is case-insensitive.

1.4.33
====================================================================

- avoid imports in calls to py.path.local().fnmatch(). Thanks Andreas Pelme for
  the PR.

- fix issue106: Naive unicode encoding when calling fspath() in python2. Thanks Tiago Nobrega for the PR.

- fix issue110: unittest.TestCase.assertWarns fails with py imported.

1.4.32
====================================================================

- fix issue70: added ability to copy all stat info in py.path.local.copy.

- make TerminalWriter.fullwidth a property.  This results in the correct
  value when the terminal gets resized.

- update supported html tags to include recent additions.
  Thanks Denis Afonso for the PR.

- Remove internal code in ``Source.compile`` meant to support earlier Python 3 versions that produced the side effect
  of leaving ``None`` in ``sys.modules`` when called (see pytest-dev/pytest#2103).
  Thanks Bruno Oliveira for the PR.

1.4.31
==================================================

- fix local().copy(dest, mode=True) to also work
  with unicode.

- pass better error message with svn EEXIST paths

1.4.30
==================================================

- fix issue68 an assert with a  multiline list comprehension 
  was not reported correctly. Thanks Henrik Heibuerger.


1.4.29
==================================================

- fix issue55: revert a change to the statement finding algorithm
  which is used by pytest for generating tracebacks.
  Thanks Daniel Hahler for initial analysis.

- fix pytest issue254 for when traceback rendering can't
  find valid source code.  Thanks Ionel Cristian Maries.


1.4.28
==================================================

- fix issue64 -- dirpath regression when "abs=True" is passed.
  Thanks Gilles Dartiguelongue.

1.4.27
==================================================

- fix issue59: point to new repo site

- allow a new ensuresyspath="append" mode for py.path.local.pyimport()
  so that a neccessary import path is appended instead of prepended to
  sys.path 

- strike undocumented, untested argument to py.path.local.pypkgpath

- speed up py.path.local.dirpath by a factor of 10

1.4.26
==================================================

- avoid calling normpath twice in py.path.local

- py.builtin._reraise properly reraises under Python3 now.

- fix issue53 - remove module index, thanks jenisys.

- allow posix path separators when "fnmatch" is called.
  Thanks Christian Long for the complete PR.

1.4.25
==================================================

- fix issue52: vaguely fix py25 compat of py.path.local (it's not
  officially supported), also fix docs

- fix pytest issue 589: when checking if we have a recursion error
  check for the specific "maximum recursion depth" text of the exception.

1.4.24
==================================================

- Fix retrieving source when an else: line has an other statement on
  the same line.

- add localpath read_text/write_text/read_bytes/write_bytes methods
  as shortcuts and clearer bytes/text interfaces for read/write.
  Adapted from a PR from Paul Moore.


1.4.23
==================================================

- use newer apipkg version which makes attribute access on
  alias modules resolve to None rather than an ImportError.
  This helps with code that uses inspect.getframeinfo()
  on py34 which causes a complete walk on sys.modules
  thus triggering the alias module to resolve and blowing
  up with ImportError.  The negative side is that something
  like "py.test.X" will now result in None instead of "importerror: pytest"
  if pytest is not installed.  But you shouldn't import "py.test" 
  anyway anymore.

- adapt one svn test to only check for any exception instead 
  of specific ones because different svn versions cause different
  errors and we don't care.


1.4.22
==================================================

- refactor class-level registry on ForkedFunc child start/finish
  event to become instance based (i.e. passed into the constructor)

1.4.21
==================================================

- ForkedFunc now has class-level register_on_start/on_exit()
  methods to allow adding information in the boxed process.
  Thanks Marc Schlaich.

- ForkedFunc in the child opens in "auto-flush" mode for
  stdout/stderr so that when a subprocess dies you can see
  its output even if it didn't flush itself.

- refactor traceback generation in light of pytest issue 364
  (shortening tracebacks).   you can now set a new traceback style 
  on a per-entry basis such that a caller can force entries to be 
  isplayed as short or long entries.

- win32: py.path.local.sysfind(name) will preferrably return files with
  extensions so that if "X" and "X.bat" or "X.exe" is on the PATH,
  one of the latter two will be returned.

1.4.20
==================================================

- ignore unicode decode errors in xmlescape.  Thanks Anatoly Bubenkoff.

- on python2 modify traceback.format_exception_only to match python3 
  behaviour, namely trying to print unicode for Exception instances

- use a safer way for serializing exception reports (helps to fix
  pytest issue413)

Changes between 1.4.18 and 1.4.19
==================================================

- merge in apipkg fixes

- some micro-optimizations in py/_code/code.py for speeding
  up pytest runs.  Thanks Alex Gaynor for initiative.

- check PY_COLORS=1 or PY_COLORS=0 to force coloring/not-coloring
  for py.io.TerminalWriter() independently from capabilities
  of the output file.  Thanks Marc Abramowitz for the PR.

- some fixes to unicode handling in assertion handling.
  Thanks for the PR to Floris Bruynooghe.  (This helps
  to fix pytest issue 319).

- depend on setuptools presence, remove distribute_setup

Changes between 1.4.17 and 1.4.18
==================================================

- introduce path.ensure_dir() as a synonym for ensure(..., dir=1)

- some unicode/python3 related fixes wrt to path manipulations
  (if you start passing unicode particular in py2 you might 
  still get problems, though)

Changes between 1.4.16 and 1.4.17
==================================================

- make py.io.TerminalWriter() prefer colorama if it is available
  and avoid empty lines when separator-lines are printed by
  being defensive and reducing the working terminalwidth by 1

- introduce optional "expanduser" argument to py.path.local
  to that local("~", expanduser=True) gives the home
  directory of "user".

Changes between 1.4.15 and 1.4.16
==================================================

- fix issue35 - define __gt__ ordering between a local path
  and strings

- fix issue36 - make chdir() work even if os.getcwd() fails.

- add path.exists/isdir/isfile/islink shortcuts

- introduce local path.as_cwd() context manager.

- introduce p.write(ensure=1) and p.open(ensure=1)
  where ensure triggers creation of neccessary parent
  dirs.


Changes between 1.4.14 and 1.4.15
==================================================

- majorly speed up some common calling patterns with
  LocalPath.listdir()/join/check/stat functions considerably.

- fix an edge case with fnmatch where a glob style pattern appeared
  in an absolute path.

Changes between 1.4.13 and 1.4.14
==================================================

- fix dupfile to work with files that don't
  carry a mode. Thanks Jason R. Coombs.

Changes between 1.4.12 and 1.4.13
==================================================

- fix getting statementrange/compiling a file ending
  in a comment line without newline (on python2.5)
- for local paths you can pass "mode=True" to a copy()
  in order to copy permission bits (underlying mechanism
  is using shutil.copymode)
- add paths arguments to py.path.local.sysfind to restrict
  search to the diretories in the path.
- add isdir/isfile/islink to path.stat() objects allowing to perform
  multiple checks without calling out multiple times
- drop py.path.local.__new__ in favour of a simpler __init__
- iniconfig: allow "name:value" settings in config files, no space after
  "name" required
- fix issue 27 - NameError in unlikely untested case of saferepr


Changes between 1.4.11 and 1.4.12
==================================================

- fix python2.4 support - for pre-AST interpreters re-introduce 
  old way to find statements in exceptions (closes pytest issue 209)
- add tox.ini to distribution
- fix issue23 - print *,** args information in tracebacks,
  thanks Manuel Jacob


Changes between 1.4.10 and 1.4.11
==================================================

- use _ast to determine statement ranges when printing tracebacks -
  avoiding multi-second delays on some large test modules
- fix an internal test to not use class-denoted pytest_funcarg__
- fix a doc link to bug tracker
- try to make terminal.write() printing more robust against
  unicodeencode/decode problems, amend according test
- introduce py.builtin.text and py.builtin.bytes
  to point to respective str/unicode (py2) and bytes/str (py3) types
- fix error handling on win32/py33 for ENODIR 

Changes between 1.4.9 and 1.4.10
==================================================

- terminalwriter: default to encode to UTF8 if no encoding is defined
  on the output stream
- issue22: improve heuristic for finding the statementrange in exceptions

Changes between 1.4.8 and 1.4.9
==================================================

- fix bug of path.visit() which would not recognize glob-style patterns
  for the "rec" recursion argument
- changed iniconfig parsing to better conform, now the chars ";"
  and "#" only mark a comment at the stripped start of a line
- include recent apipkg-1.2
- change internal terminalwriter.line/reline logic to more nicely
  support file spinners

Changes between 1.4.7 and 1.4.8
==================================================

- fix issue 13 - correct handling of the tag name object in xmlgen
- fix issue 14 - support raw attribute values in xmlgen
- fix windows terminalwriter printing/re-line problem
- update distribute_setup.py to 0.6.27

Changes between 1.4.6 and 1.4.7
==================================================

- fix issue11 - own test failure with python3.3 / Thanks Benjamin Peterson
- help fix pytest issue 102

Changes between 1.4.5 and 1.4.6
==================================================

- help to fix pytest issue99: unify output of 
  ExceptionInfo.getrepr(style="native") with ...(style="long")
- fix issue7: source.getstatementrange() now raises proper error
  if no valid statement can be found
- fix issue8: fix code and tests of svnurl/svnwc to work on subversion 1.7 - 
  note that path.status(updates=1) will not properly work svn-17's status 
  --xml output is broken.
- make source.getstatementrange() more resilent about non-python code frames
  (as seen from jnja2)
- make trackeback recursion detection more resilent
  about the eval magic of a decorator library
- iniconfig: add support for ; as comment starter
- properly handle lists in xmlgen on python3
- normalize py.code.getfslineno(obj) to always return a (string, int) tuple
  defaulting to ("", -1) respectively if no source code can be found for obj.

Changes between 1.4.4 and 1.4.5
==================================================

- improve some unicode handling in terminalwriter and capturing
  (used by pytest)

Changes between 1.4.3 and 1.4.4
==================================================

- a few fixes and assertion related refinements for pytest-2.1
- guard py.code.Code and getfslineno against bogus input
  and make py.code.Code objects for object instance
  by looking up their __call__ function.
- make exception presentation robust against invalid current cwd

Changes between 1.4.2 and 1.4.3
==================================================

- fix terminal coloring issue for skipped tests (thanks Amaury)
- fix issue4 - large calls to ansi_print (thanks Amaury)

Changes between 1.4.1 and 1.4.2
==================================================

- fix (pytest) issue23 - tmpdir argument now works on Python3.2 and WindowsXP
  (which apparently starts to offer os.symlink now)

- better error message for syntax errors from compiled code

- small fix to better deal with (un-)colored terminal output on windows

Changes between 1.4.0 and 1.4.1
==================================================

- fix issue1 - py.error.* classes to be pickleable

- fix issue2 - on windows32 use PATHEXT as the list of potential
  extensions to find find binaries with py.path.local.sysfind(commandname)

- fix (pytest-) issue10 and refine assertion reinterpretation
  to avoid breaking if the __nonzero__ of an object fails

- fix (pytest-) issue17 where python3 does not like "import *"
  leading to misrepresentation of import-errors in test modules

- fix py.error.* attribute pypy access issue

- allow path.samefile(arg) to succeed when arg is a relative filename

- fix (pytest-) issue20 path.samefile(relpath) works as expected now

- fix (pytest-) issue8 len(long_list) now shows the length of the list

Changes between 1.3.4 and 1.4.0
==================================================

- py.test was moved to a separate "pytest" package. What remains is
  a stub hook which will proxy ``import py.test`` to ``pytest``.
- all command line tools ("py.cleanup/lookup/countloc/..." moved 
  to "pycmd" package)
- removed the old and deprecated "py.magic" namespace
- use apipkg-1.1 and make py.apipkg.initpkg|ApiModule available
- add py.iniconfig module for brain-dead easy ini-config file parsing
- introduce py.builtin.any()
- path objects have a .dirname attribute now (equivalent to
  os.path.dirname(path))
- path.visit() accepts breadthfirst (bf) and sort options
- remove deprecated py.compat namespace

Changes between 1.3.3 and 1.3.4
==================================================

- fix issue111: improve install documentation for windows
- fix issue119: fix custom collectability of __init__.py as a module
- fix issue116: --doctestmodules work with __init__.py files as well
- fix issue115: unify internal exception passthrough/catching/GeneratorExit
- fix issue118: new --tb=native for presenting cpython-standard exceptions

Changes between 1.3.2 and 1.3.3
==================================================

- fix issue113: assertion representation problem with triple-quoted strings
  (and possibly other cases)
- make conftest loading detect that a conftest file with the same
  content was already loaded, avoids surprises in nested directory structures
  which can be produced e.g. by Hudson. It probably removes the need to use
  --confcutdir in most cases.
- fix terminal coloring for win32
  (thanks Michael Foord for reporting)
- fix weirdness: make terminal width detection work on stdout instead of stdin
  (thanks Armin Ronacher for reporting)
- remove trailing whitespace in all py/text distribution files

Changes between 1.3.1 and 1.3.2
==================================================

New features
++++++++++++++++++

- fix issue103:  introduce py.test.raises as context manager, examples::

    with py.test.raises(ZeroDivisionError):
        x = 0
        1 / x

    with py.test.raises(RuntimeError) as excinfo:
        call_something()

    # you may do extra checks on excinfo.value|type|traceback here

  (thanks Ronny Pfannschmidt)

- Funcarg factories can now dynamically apply a marker to a
  test invocation.  This is for example useful if a factory
  provides parameters to a test which are expected-to-fail::

    def pytest_funcarg__arg(request):
        request.applymarker(py.test.mark.xfail(reason="flaky config"))
        ...

    def test_function(arg):
        ...

- improved error reporting on collection and import errors. This makes
  use of a more general mechanism, namely that for custom test item/collect
  nodes ``node.repr_failure(excinfo)`` is now uniformly called so that you can
  override it to return a string error representation of your choice
  which is going to be reported as a (red) string.

- introduce '--junitprefix=STR' option to prepend a prefix
  to all reports in the junitxml file.

Bug fixes / Maintenance
++++++++++++++++++++++++++

- make tests and the ``pytest_recwarn`` plugin in particular fully compatible
  to Python2.7 (if you use the ``recwarn`` funcarg warnings will be enabled so that
  you can properly check for their existence in a cross-python manner).
- refine --pdb: ignore xfailed tests, unify its TB-reporting and
  don't display failures again at the end.
- fix assertion interpretation with the ** operator (thanks Benjamin Peterson)
- fix issue105 assignment on the same line as a failing assertion (thanks Benjamin Peterson)
- fix issue104 proper escaping for test names in junitxml plugin (thanks anonymous)
- fix issue57 -f|--looponfail to work with xpassing tests (thanks Ronny)
- fix issue92 collectonly reporter and --pastebin (thanks Benjamin Peterson)
- fix py.code.compile(source) to generate unique filenames
- fix assertion re-interp problems on PyPy, by defering code
  compilation to the (overridable) Frame.eval class. (thanks Amaury Forgeot)
- fix py.path.local.pyimport() to work with directories
- streamline py.path.local.mkdtemp implementation and usage
- don't print empty lines when showing junitxml-filename
- add optional boolean ignore_errors parameter to py.path.local.remove
- fix terminal writing on win32/python2.4
- py.process.cmdexec() now tries harder to return properly encoded unicode objects
  on all python versions
- install plain py.test/py.which scripts also for Jython, this helps to
  get canonical script paths in virtualenv situations
- make path.bestrelpath(path) return ".", note that when calling
  X.bestrelpath the assumption is that X is a directory.
- make initial conftest discovery ignore "--" prefixed arguments
- fix resultlog plugin when used in an multicpu/multihost xdist situation
  (thanks Jakub Gustak)
- perform distributed testing related reporting in the xdist-plugin
  rather than having dist-related code in the generic py.test
  distribution
- fix homedir detection on Windows
- ship distribute_setup.py version 0.6.13

Changes between 1.3.0 and 1.3.1
==================================================

New features
++++++++++++++++++

- issue91: introduce new py.test.xfail(reason) helper
  to imperatively mark a test as expected to fail. Can
  be used from within setup and test functions. This is
  useful especially for parametrized tests when certain
  configurations are expected-to-fail.  In this case the
  declarative approach with the @py.test.mark.xfail cannot
  be used as it would mark all configurations as xfail.

- issue102: introduce new --maxfail=NUM option to stop
  test runs after NUM failures.  This is a generalization
  of the '-x' or '--exitfirst' option which is now equivalent
  to '--maxfail=1'.  Both '-x' and '--maxfail' will
  now also print a line near the end indicating the Interruption.

- issue89: allow py.test.mark decorators to be used on classes
  (class decorators were introduced with python2.6) and
  also allow to have multiple markers applied at class/module level
  by specifying a list.

- improve and refine letter reporting in the progress bar:
  .  pass
  f  failed test
  s  skipped tests (reminder: use for dependency/platform mismatch only)
  x  xfailed test (test that was expected to fail)
  X  xpassed test (test that was expected to fail but passed)

  You can use any combination of 'fsxX' with the '-r' extended
  reporting option. The xfail/xpass results will show up as
  skipped tests in the junitxml output - which also fixes
  issue99.

- make py.test.cmdline.main() return the exitstatus instead of raising
  SystemExit and also allow it to be called multiple times.  This of
  course requires that your application and tests are properly teared
  down and don't have global state.

Fixes / Maintenance
++++++++++++++++++++++

- improved traceback presentation:
  - improved and unified reporting for "--tb=short" option
  - Errors during test module imports are much shorter, (using --tb=short style)
  - raises shows shorter more relevant tracebacks
  - --fulltrace now more systematically makes traces longer / inhibits cutting

- improve support for raises and other dynamically compiled code by
  manipulating python's linecache.cache instead of the previous
  rather hacky way of creating custom code objects.  This makes
  it seemlessly work on Jython and PyPy where it previously didn't.

- fix issue96: make capturing more resilient against Control-C
  interruptions (involved somewhat substantial refactoring
  to the underlying capturing functionality to avoid race
  conditions).

- fix chaining of conditional skipif/xfail decorators - so it works now
  as expected to use multiple @py.test.mark.skipif(condition) decorators,
  including specific reporting which of the conditions lead to skipping.

- fix issue95: late-import zlib so that it's not required
  for general py.test startup.

- fix issue94: make reporting more robust against bogus source code
  (and internally be more careful when presenting unexpected byte sequences)


Changes between 1.2.1 and 1.3.0
==================================================

- deprecate --report option in favour of a new shorter and easier to
  remember -r option: it takes a string argument consisting of any
  combination of 'xfsX' characters.  They relate to the single chars
  you see during the dotted progress printing and will print an extra line
  per test at the end of the test run.  This extra line indicates the exact
  position or test ID that you directly paste to the py.test cmdline in order
  to re-run a particular test.

- allow external plugins to register new hooks via the new
  pytest_addhooks(pluginmanager) hook.  The new release of
  the pytest-xdist plugin for distributed and looponfailing
  testing requires this feature.

- add a new pytest_ignore_collect(path, config) hook to allow projects and
  plugins to define exclusion behaviour for their directory structure -
  for example you may define in a conftest.py this method::

        def pytest_ignore_collect(path):
            return path.check(link=1)

  to prevent even a collection try of any tests in symlinked dirs.

- new pytest_pycollect_makemodule(path, parent) hook for
  allowing customization of the Module collection object for a
  matching test module.

- extend and refine xfail mechanism:
  ``@py.test.mark.xfail(run=False)`` do not run the decorated test
  ``@py.test.mark.xfail(reason="...")`` prints the reason string in xfail summaries
  specifiying ``--runxfail`` on command line virtually ignores xfail markers

- expose (previously internal) commonly useful methods:
  py.io.get_terminal_with() -> return terminal width
  py.io.ansi_print(...) -> print colored/bold text on linux/win32
  py.io.saferepr(obj) -> return limited representation string

- expose test outcome related exceptions as py.test.skip.Exception,
  py.test.raises.Exception etc., useful mostly for plugins
  doing special outcome interpretation/tweaking

- (issue85) fix junitxml plugin to handle tests with non-ascii output

- fix/refine python3 compatibility (thanks Benjamin Peterson)

- fixes for making the jython/win32 combination work, note however:
  jython2.5.1/win32 does not provide a command line launcher, see
  http://bugs.jython.org/issue1491 . See pylib install documentation
  for how to work around.

- fixes for handling of unicode exception values and unprintable objects

- (issue87) fix unboundlocal error in assertionold code

- (issue86) improve documentation for looponfailing

- refine IO capturing: stdin-redirect pseudo-file now has a NOP close() method

- ship distribute_setup.py version 0.6.10

- added links to the new capturelog and coverage plugins


Changes between 1.2.1 and 1.2.0
=====================================

- refined usage and options for "py.cleanup"::

    py.cleanup     # remove "*.pyc" and "*$py.class" (jython) files
    py.cleanup -e .swp -e .cache # also remove files with these extensions
    py.cleanup -s  # remove "build" and "dist" directory next to setup.py files
    py.cleanup -d  # also remove empty directories
    py.cleanup -a  # synonym for "-s -d -e 'pip-log.txt'"
    py.cleanup -n  # dry run, only show what would be removed

- add a new option "py.test --funcargs" which shows available funcargs
  and their help strings (docstrings on their respective factory function)
  for a given test path

- display a short and concise traceback if a funcarg lookup fails

- early-load "conftest.py" files in non-dot first-level sub directories.
  allows to conveniently keep and access test-related options in a ``test``
  subdir and still add command line options.

- fix issue67: new super-short traceback-printing option: "--tb=line" will print a single line for each failing (python) test indicating its filename, lineno and the failure value

- fix issue78: always call python-level teardown functions even if the
  according setup failed.  This includes refinements for calling setup_module/class functions
  which will now only be called once instead of the previous behaviour where they'd be called
  multiple times if they raise an exception (including a Skipped exception).  Any exception
  will be re-corded and associated with all tests in the according module/class scope.

- fix issue63: assume <40 columns to be a bogus terminal width, default to 80

- fix pdb debugging to be in the correct frame on raises-related errors

- update apipkg.py to fix an issue where recursive imports might
  unnecessarily break importing

- fix plugin links

Changes between 1.2 and 1.1.1
=====================================

- moved dist/looponfailing from py.test core into a new
  separately released pytest-xdist plugin.

- new junitxml plugin: --junitxml=path will generate a junit style xml file
  which is processable e.g. by the Hudson CI system.

- new option: --genscript=path will generate a standalone py.test script
  which will not need any libraries installed.  thanks to Ralf Schmitt.

- new option: --ignore will prevent specified path from collection.
  Can be specified multiple times.

- new option: --confcutdir=dir will make py.test only consider conftest
  files that are relative to the specified dir.

- new funcarg: "pytestconfig" is the pytest config object for access
  to command line args and can now be easily used in a test.

- install 'py.test' and `py.which` with a ``-$VERSION`` suffix to
  disambiguate between Python3, python2.X, Jython and PyPy installed versions.

- new "pytestconfig" funcarg allows access to test config object

- new "pytest_report_header" hook can return additional lines
  to be displayed at the header of a test run.

- (experimental) allow "py.test path::name1::name2::..." for pointing
  to a test within a test collection directly.  This might eventually
  evolve as a full substitute to "-k" specifications.

- streamlined plugin loading: order is now as documented in
  customize.html: setuptools, ENV, commandline, conftest.
  also setuptools entry point names are turned to canonical namees ("pytest_*")

- automatically skip tests that need 'capfd' but have no os.dup

- allow pytest_generate_tests to be defined in classes as well

- deprecate usage of 'disabled' attribute in favour of pytestmark
- deprecate definition of Directory, Module, Class and Function nodes
  in conftest.py files.  Use pytest collect hooks instead.

- collection/item node specific runtest/collect hooks are only called exactly
  on matching conftest.py files, i.e. ones which are exactly below
  the filesystem path of an item

- change: the first pytest_collect_directory hook to return something
  will now prevent further hooks to be called.

- change: figleaf plugin now requires --figleaf to run.  Also
  change its long command line options to be a bit shorter (see py.test -h).

- change: pytest doctest plugin is now enabled by default and has a
  new option --doctest-glob to set a pattern for file matches.

- change: remove internal py._* helper vars, only keep py._pydir

- robustify capturing to survive if custom pytest_runtest_setup
  code failed and prevented the capturing setup code from running.

- make py.test.* helpers provided by default plugins visible early -
  works transparently both for pydoc and for interactive sessions
  which will regularly see e.g. py.test.mark and py.test.importorskip.

- simplify internal plugin manager machinery
- simplify internal collection tree by introducing a RootCollector node

- fix assert reinterpreation that sees a call containing "keyword=..."

- fix issue66: invoke pytest_sessionstart and pytest_sessionfinish
  hooks on slaves during dist-testing, report module/session teardown
  hooks correctly.

- fix issue65: properly handle dist-testing if no
  execnet/py lib installed remotely.

- skip some install-tests if no execnet is available

- fix docs, fix internal bin/ script generation


Changes between 1.1.1 and 1.1.0
=====================================

- introduce automatic plugin registration via 'pytest11'
  entrypoints via setuptools' pkg_resources.iter_entry_points

- fix py.test dist-testing to work with execnet >= 1.0.0b4

- re-introduce py.test.cmdline.main() for better backward compatibility

- svn paths: fix a bug with path.check(versioned=True) for svn paths,
  allow '%' in svn paths, make svnwc.update() default to interactive mode
  like in 1.0.x and add svnwc.update(interactive=False) to inhibit interaction.

- refine distributed tarball to contain test and no pyc files

- try harder to have deprecation warnings for py.compat.* accesses
  report a correct location

Changes between 1.1.0 and 1.0.2
=====================================

* adjust and improve docs

* remove py.rest tool and internal namespace - it was
  never really advertised and can still be used with
  the old release if needed.  If there is interest
  it could be revived into its own tool i guess.

* fix issue48 and issue59: raise an Error if the module
  from an imported test file does not seem to come from
  the filepath - avoids "same-name" confusion that has
  been reported repeatedly

* merged Ronny's nose-compatibility hacks: now
  nose-style setup_module() and setup() functions are
  supported

* introduce generalized py.test.mark function marking

* reshuffle / refine command line grouping

* deprecate parser.addgroup in favour of getgroup which creates option group

* add --report command line option that allows to control showing of skipped/xfailed sections

* generalized skipping: a new way to mark python functions with skipif or xfail
  at function, class and modules level based on platform or sys-module attributes.

* extend py.test.mark decorator to allow for positional args

* introduce and test "py.cleanup -d" to remove empty directories

* fix issue #59 - robustify unittest test collection

* make bpython/help interaction work by adding an __all__ attribute
  to ApiModule, cleanup initpkg

* use MIT license for pylib, add some contributors

* remove py.execnet code and substitute all usages with 'execnet' proper

* fix issue50 - cached_setup now caches more to expectations
  for test functions with multiple arguments.

* merge Jarko's fixes, issue #45 and #46

* add the ability to specify a path for py.lookup to search in

* fix a funcarg cached_setup bug probably only occuring
  in distributed testing and "module" scope with teardown.

* many fixes and changes for making the code base python3 compatible,
  many thanks to Benjamin Peterson for helping with this.

* consolidate builtins implementation to be compatible with >=2.3,
  add helpers to ease keeping 2 and 3k compatible code

* deprecate py.compat.doctest|subprocess|textwrap|optparse

* deprecate py.magic.autopath, remove py/magic directory

* move pytest assertion handling to py/code and a pytest_assertion
  plugin, add "--no-assert" option, deprecate py.magic namespaces
  in favour of (less) py.code ones.

* consolidate and cleanup py/code classes and files

* cleanup py/misc, move tests to bin-for-dist

* introduce delattr/delitem/delenv methods to py.test's monkeypatch funcarg

* consolidate py.log implementation, remove old approach.

* introduce py.io.TextIO and py.io.BytesIO for distinguishing between
  text/unicode and byte-streams (uses underlying standard lib io.*
  if available)

* make py.unittest_convert helper script available which converts "unittest.py"
  style files into the simpler assert/direct-test-classes py.test/nosetests
  style.  The script was written by Laura Creighton.

* simplified internal localpath implementation

Changes between 1.0.1 and 1.0.2
=====================================

* fixing packaging issues, triggered by fedora redhat packaging,
  also added doc, examples and contrib dirs to the tarball.

* added a documentation link to the new django plugin.

Changes between 1.0.0 and 1.0.1
=====================================

* added a 'pytest_nose' plugin which handles nose.SkipTest,
  nose-style function/method/generator setup/teardown and
  tries to report functions correctly.

* capturing of unicode writes or encoded strings to sys.stdout/err
  work better, also terminalwriting was adapted and somewhat
  unified between windows and linux.

* improved documentation layout and content a lot

* added a "--help-config" option to show conftest.py / ENV-var names for
  all longopt cmdline options, and some special conftest.py variables.
  renamed 'conf_capture' conftest setting to 'option_capture' accordingly.

* fix issue #27: better reporting on non-collectable items given on commandline
  (e.g. pyc files)

* fix issue #33: added --version flag (thanks Benjamin Peterson)

* fix issue #32: adding support for "incomplete" paths to wcpath.status()

* "Test" prefixed classes are *not* collected by default anymore if they
  have an __init__ method

* monkeypatch setenv() now accepts a "prepend" parameter

* improved reporting of collection error tracebacks

* simplified multicall mechanism and plugin architecture,
  renamed some internal methods and argnames

Changes between 1.0.0b9 and 1.0.0
=====================================

* more terse reporting try to show filesystem path relatively to current dir
* improve xfail output a bit

Changes between 1.0.0b8 and 1.0.0b9
=====================================

* cleanly handle and report final teardown of test setup

* fix svn-1.6 compat issue with py.path.svnwc().versioned()
  (thanks Wouter Vanden Hove)

* setup/teardown or collection problems now show as ERRORs
  or with big "E"'s in the progress lines.  they are reported
  and counted separately.

* dist-testing: properly handle test items that get locally
  collected but cannot be collected on the remote side - often
  due to platform/dependency reasons

* simplified py.test.mark API - see keyword plugin documentation

* integrate better with logging: capturing now by default captures
  test functions and their immediate setup/teardown in a single stream

* capsys and capfd funcargs now have a readouterr() and a close() method
  (underlyingly py.io.StdCapture/FD objects are used which grew a
  readouterr() method as well to return snapshots of captured out/err)

* make assert-reinterpretation work better with comparisons not
  returning bools (reported with numpy from thanks maciej fijalkowski)

* reworked per-test output capturing into the pytest_iocapture.py plugin
  and thus removed capturing code from config object

* item.repr_failure(excinfo) instead of item.repr_failure(excinfo, outerr)


Changes between 1.0.0b7 and 1.0.0b8
=====================================

* pytest_unittest-plugin is now enabled by default

* introduced pytest_keyboardinterrupt hook and
  refined pytest_sessionfinish hooked, added tests.

* workaround a buggy logging module interaction ("closing already closed
  files").  Thanks to Sridhar Ratnakumar for triggering.

* if plugins use "py.test.importorskip" for importing
  a dependency only a warning will be issued instead
  of exiting the testing process.

* many improvements to docs:
  - refined funcargs doc , use the term "factory" instead of "provider"
  - added a new talk/tutorial doc page
  - better download page
  - better plugin docstrings
  - added new plugins page and automatic doc generation script

* fixed teardown problem related to partially failing funcarg setups
  (thanks MrTopf for reporting), "pytest_runtest_teardown" is now
  always invoked even if the "pytest_runtest_setup" failed.

* tweaked doctest output for docstrings in py modules,
  thanks Radomir.

Changes between 1.0.0b3 and 1.0.0b7
=============================================

* renamed py.test.xfail back to py.test.mark.xfail to avoid
  two ways to decorate for xfail

* re-added py.test.mark decorator for setting keywords on functions
  (it was actually documented so removing it was not nice)

* remove scope-argument from request.addfinalizer() because
  request.cached_setup has the scope arg. TOOWTDI.

* perform setup finalization before reporting failures

* apply modified patches from Andreas Kloeckner to allow
  test functions to have no func_code (#22) and to make
  "-k" and function keywords work  (#20)

* apply patch from Daniel Peolzleithner (issue #23)

* resolve issue #18, multiprocessing.Manager() and
  redirection clash

* make __name__ == "__channelexec__" for remote_exec code

Changes between 1.0.0b1 and 1.0.0b3
=============================================

* plugin classes are removed: one now defines
  hooks directly in conftest.py or global pytest_*.py
  files.

* added new pytest_namespace(config) hook that allows
  to inject helpers directly to the py.test.* namespace.

* documented and refined many hooks

* added new style of generative tests via
  pytest_generate_tests hook that integrates
  well with function arguments.


Changes between 0.9.2 and 1.0.0b1
=============================================

* introduced new "funcarg" setup method,
  see doc/test/funcarg.txt

* introduced plugin architecuture and many
  new py.test plugins, see
  doc/test/plugins.txt

* teardown_method is now guaranteed to get
  called after a test method has run.

* new method: py.test.importorskip(mod,minversion)
  will either import or call py.test.skip()

* completely revised internal py.test architecture

* new py.process.ForkedFunc object allowing to
  fork execution of a function to a sub process
  and getting a result back.

XXX lots of things missing here XXX

Changes between 0.9.1 and 0.9.2
===============================

* refined installation and metadata, created new setup.py,
  now based on setuptools/ez_setup (thanks to Ralf Schmitt
  for his support).

* improved the way of making py.* scripts available in
  windows environments, they are now added to the
  Scripts directory as ".cmd" files.

* py.path.svnwc.status() now is more complete and
  uses xml output from the 'svn' command if available
  (Guido Wesdorp)

* fix for py.path.svn* to work with svn 1.5
  (Chris Lamb)

* fix path.relto(otherpath) method on windows to
  use normcase for checking if a path is relative.

* py.test's traceback is better parseable from editors
  (follows the filenames:LINENO: MSG convention)
  (thanks to Osmo Salomaa)

* fix to javascript-generation, "py.test --runbrowser"
  should work more reliably now

* removed previously accidentally added
  py.test.broken and py.test.notimplemented helpers.

* there now is a py.__version__ attribute

Changes between 0.9.0 and 0.9.1
===============================

This is a fairly complete list of changes between 0.9 and 0.9.1, which can
serve as a reference for developers.

* allowing + signs in py.path.svn urls [39106]
* fixed support for Failed exceptions without excinfo in py.test [39340]
* added support for killing processes for Windows (as well as platforms that
  support os.kill) in py.misc.killproc [39655]
* added setup/teardown for generative tests to py.test [40702]
* added detection of FAILED TO LOAD MODULE to py.test [40703, 40738, 40739]
* fixed problem with calling .remove() on wcpaths of non-versioned files in
  py.path [44248]
* fixed some import and inheritance issues in py.test [41480, 44648, 44655]
* fail to run greenlet tests when pypy is available, but without stackless
  [45294]
* small fixes in rsession tests [45295]
* fixed issue with 2.5 type representations in py.test [45483, 45484]
* made that internal reporting issues displaying is done atomically in py.test
  [45518]
* made that non-existing files are igored by the py.lookup script [45519]
* improved exception name creation in py.test [45535]
* made that less threads are used in execnet [merge in 45539]
* removed lock required for atomical reporting issue displaying in py.test
  [45545]
* removed globals from execnet [45541, 45547]
* refactored cleanup mechanics, made that setDaemon is set to 1 to make atexit
  get called in 2.5 (py.execnet) [45548]
* fixed bug in joining threads in py.execnet's servemain [45549]
* refactored py.test.rsession tests to not rely on exact output format anymore
  [45646]
* using repr() on test outcome [45647]
* added 'Reason' classes for py.test.skip() [45648, 45649]
* killed some unnecessary sanity check in py.test.collect [45655]
* avoid using os.tmpfile() in py.io.fdcapture because on Windows it's only
  usable by Administrators [45901]
* added support for locking and non-recursive commits to py.path.svnwc [45994]
* locking files in py.execnet to prevent CPython from segfaulting [46010]
* added export() method to py.path.svnurl
* fixed -d -x in py.test [47277]
* fixed argument concatenation problem in py.path.svnwc [49423]
* restore py.test behaviour that it exits with code 1 when there are failures
  [49974]
* don't fail on html files that don't have an accompanying .txt file [50606]
* fixed 'utestconvert.py < input' [50645]
* small fix for code indentation in py.code.source [50755]
* fix _docgen.py documentation building [51285]
* improved checks for source representation of code blocks in py.test [51292]
* added support for passing authentication to py.path.svn* objects [52000,
  52001]
* removed sorted() call for py.apigen tests in favour of [].sort() to support
  Python 2.3 [52481]
