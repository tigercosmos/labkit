
FAIL new RTCPeerConnection() should have default rtcpMuxPolicy require assert_equals: expected (string) "require" but got (undefined) undefined
FAIL new RTCPeerConnection({ rtcpMuxPolicy: undefined }) should have default rtcpMuxPolicy require assert_equals: expected (string) "require" but got (undefined) undefined
FAIL new RTCPeerConnection({ rtcpMuxPolicy: 'require' }) should succeed assert_equals: expected (string) "require" but got (undefined) undefined
FAIL new RTCPeerConnection({ rtcpMuxPolicy: 'negotiate' }) may succeed or throw NotSupportedError assert_equals: expected (string) "negotiate" but got (undefined) undefined
FAIL new RTCPeerConnection(config) - with { rtcpMuxPolicy: null } should throw TypeError assert_throws: function "() =>
      makePc({ rtcpMuxPolicy: null })" did not throw
FAIL setConfiguration(config) - with { rtcpMuxPolicy: null } should throw TypeError assert_throws: function "() =>
      makePc({ rtcpMuxPolicy: null })" did not throw
FAIL new RTCPeerConnection(config) - with { rtcpMuxPolicy: 'invalid' } should throw TypeError assert_throws: function "() =>
      makePc({ rtcpMuxPolicy: 'invalid' })" did not throw
FAIL setConfiguration(config) - with { rtcpMuxPolicy: 'invalid' } should throw TypeError assert_throws: function "() =>
      makePc({ rtcpMuxPolicy: 'invalid' })" did not throw
FAIL setConfiguration({ rtcpMuxPolicy: 'negotiate' }) with initial rtcpMuxPolicy require should throw InvalidModificationError assert_throws: function "() =>
      pc.setConfiguration({ rtcpMuxPolicy: 'negotiate' })" did not throw
FAIL setConfiguration({ rtcpMuxPolicy: 'require' }) with initial rtcpMuxPolicy negotiate should throw InvalidModificationError assert_throws: function "() =>
      pc.setConfiguration({ rtcpMuxPolicy: 'require' })" did not throw
FAIL setConfiguration({}) with initial rtcpMuxPolicy negotiate should throw InvalidModificationError assert_throws: function "() =>
      pc.setConfiguration({})" did not throw

